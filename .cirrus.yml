# Due to the dependency on encrypted variables, this will only work in a
# specific repo
# only_if: $CIRRUS_REPO_OWNER == 'anarazel' && $CIRRUS_REPO_NAME == 'pg-vm-images'

env:
  CIRRUS_LOG_TIMESTAMP: true

  # Prefix for image names
  PREFIX: pg-ci

  # See gcp_project_setup.txt for setup instructions
  GCP_PROJECT_MAIN: pg-ci-images
  GCP_PROJECT_DEV: pg-ci-images-dev

  # the following variables are chosen in .cirrus.star, based on the branch
  # being built etc
  # BRANCH_TYPE = dev|main
  # BUCKET = ${GCP_PROJECT_MAIN}-bucket or ${GCP_PROJECT_DEV}-bucket
  # GCP_PROJECT = $GCP_PROJECT_MAIN or $GCP_PROJECT_DEV
  # GCP_REGION
  # GCP_REPO


# central definition for the tasks interacting with gcp

# shared gcp auth
gcp_auth: &gcp_auth
  env:
    # image-builder@pg-ci-images-dev.iam.gserviceaccount.com
    GAC_DEV: ENCRYPTED[f5d73e4c47da389f1a64ee423efe34016e13d84126123f4440546cd19f038c90368daab3ef51845ca9360b5df5c50518]
    # image-builder@pg-ci-images.iam.gserviceaccount.com
    GAC_MAIN: ENCRYPTED[f5d73e4c47da389f1a64ee423efe34016e13d84126123f4440546cd19f038c90368daab3ef51845ca9360b5df5c50518]

# gcp auth for unixoid systems
gcp_auth_unix: &gcp_auth_unix
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-service-account-${BRANCH_TYPE}.json

  gcp_main_key_file:
    path: /gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: /gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud auth list

# gcp auth for windows
gcp_auth_win: &gcp_auth_win
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: c:/gcp-service-account-%BRANCH_TYPE%.json

  gcp_main_key_file:
    path: c:/gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: c:/gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=%GOOGLE_APPLICATION_CREDENTIALS%
    - gcloud auth list

# docker->gcp auth for unixoid systems
gcp_docker_auth_unix: &gcp_docker_auth_unix
  <<: *gcp_auth_unix
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet $GCP_REGION-docker.pkg.dev

# docker->gcp  auth for windows systems
gcp_docker_auth_win: &gcp_docker_auth_win
  <<: *gcp_auth_win
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet %GCP_REGION%-docker.pkg.dev


task:
  name: Clean up leftover running
  alias: cleanup-leftover-running

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  <<: *gcp_auth_unix

  cleanup_leftover_running_script:
    ./gcp_delete_leftover_running.py


task:
  name: 'Building VM Image: ${IMAGE_NAME}'
  alias: vmbuild-${TASK_NAME}
  matrix:
    - env:
        TASK_NAME: freebsd-13
        PACKERFILE: packer/freebsd.pkr.hcl

  env:
    IMAGE_NAME: ${PREFIX}-${TASK_NAME}

  depends_on: cleanup-leftover-running

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', $SCRIPTS, $PACKERFILE)
  allow_failures: $CIRRUS_TASK_NAME =~ '.*\[sid\].*'
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  export_date_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M-%S')
    echo "DATE=${DATE}" | tee -a $CIRRUS_ENV

  build_image_script: |
    packer build \
      -only "*.${TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      -var "image_name=${IMAGE_NAME}" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"

  make_image_public_script: |
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      ${IMAGE_NAME}-${DATE}

    gcloud compute images update \
      --project "$GCP_PROJECT" \
      --family ${IMAGE_NAME} \
      ${IMAGE_NAME}-${DATE}


task:
  name: Clean up old images

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  <<: *gcp_auth_unix

  cleanup_images_script:
    ./gcp_delete_old_images.py
