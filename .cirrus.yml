# Due to the dependency on encrypted variables, this will only work in a
# specific repo
# only_if: $CIRRUS_REPO_OWNER == 'anarazel' && $CIRRUS_REPO_NAME == 'pg-vm-images'

env:
  CIRRUS_LOG_TIMESTAMP: true

  # See gcp_project_setup.txt for setup instructions
  GCP_PROJECT_MAIN: pg-ci-images
  GCP_PROJECT_DEV: pg-ci-images-dev

  # the following variables are chosen in .cirrus.star, based on the branch
  # being built etc
  # BRANCH_TYPE = dev|main
  # BUCKET = ${GCP_PROJECT_MAIN}-bucket or ${GCP_PROJECT_DEV}-bucket
  # GCP_PROJECT = $GCP_PROJECT_MAIN or $GCP_PROJECT_DEV
  # GCP_REGION
  # GCP_REPO


# central definition for the tasks interacting with gcp

# shared gcp auth
gcp_auth: &gcp_auth
  env:
    # image-builder@pg-ci-images-dev.iam.gserviceaccount.com
    GAC_DEV: ENCRYPTED[f5d73e4c47da389f1a64ee423efe34016e13d84126123f4440546cd19f038c90368daab3ef51845ca9360b5df5c50518]
    # image-builder@pg-ci-images.iam.gserviceaccount.com
    GAC_MAIN: ENCRYPTED[f5d73e4c47da389f1a64ee423efe34016e13d84126123f4440546cd19f038c90368daab3ef51845ca9360b5df5c50518]

# gcp auth for unixoid systems
gcp_auth_unix: &gcp_auth_unix
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-service-account-${BRANCH_TYPE}.json

  gcp_main_key_file:
    path: /gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: /gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud auth list

# gcp auth for windows
gcp_auth_win: &gcp_auth_win
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: c:/gcp-service-account-%BRANCH_TYPE%.json

  gcp_main_key_file:
    path: c:/gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: c:/gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=%GOOGLE_APPLICATION_CREDENTIALS%
    - gcloud auth list

# docker->gcp auth for unixoid systems
gcp_docker_auth_unix: &gcp_docker_auth_unix
  <<: *gcp_auth_unix
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet $GCP_REGION-docker.pkg.dev

# docker->gcp  auth for windows systems
gcp_docker_auth_win: &gcp_docker_auth_win
  <<: *gcp_auth_win
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet %GCP_REGION%-docker.pkg.dev


# Occasionally image creation succeeds despite signalling a failure.
# Without further action that'd result in accesses to the image failing
# due to lacking privileges. Deprecating the image avoids it being used
# by default, but leaves the image around for potential investigation.
on_failure_googlecompute: &on_failure_googlecompute
  deprecate_images_script: |
    gcloud compute images deprecate pg-ci-${CIRRUS_TASK_NAME}-${DATE} --state=DEPRECATED


# task:
#   name: extract_vcpkg_cache

#   env:
#     VCPKG_CACHE_DIR: ${CIRRUS_WORKING_DIR}/vcpkg_cache_dir

#   container:
#     image: debian:latest
#     cpu: 0.5
#     memory: 256Mi

#   always:
#     vcpkg_cache:
#       folder: ${VCPKG_CACHE_DIR}

#     vcpkg_cache_artifacts:
#       path: ${VCPKG_CACHE_DIR}/*

task:
  name: windows-ci-vs-2019

  env:
    VCPKG_CACHE_DIR: ${CIRRUS_WORKING_DIR}/vcpkg_cache_dir
    PACKERFILE: packer/windows.pkr.hcl
    SCRIPTS: scripts/windows*

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 2
    memory: 4G

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', $SCRIPTS, $PACKERFILE)
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  vcpkg_cache:
    folder: ${VCPKG_CACHE_DIR}

  vcpkg_cache_helpers_script: |
    mkdir -p ${VCPKG_CACHE_DIR}
    cd ${VCPKG_CACHE_DIR}
    zip -r vcpkg_cache_upload.zip *

  vcpkg_cache_artifacts:
    path: ${VCPKG_CACHE_DIR}/vcpkg_cache_upload.zip

  export_date_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M-%S')
    echo "DATE=${DATE}" | tee -a $CIRRUS_ENV

  build_image_script: |
    packer build \
      -only "*.${CIRRUS_TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      -var "task_name=${CIRRUS_TASK_NAME}" \
      -var "vcpkg_cache_dir=${VCPKG_CACHE_DIR}" \
      -var "cirrus_build_id=${CIRRUS_BUILD_ID}" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}

  always:
    unzip_cache_script: |
      ls -la ${VCPKG_CACHE_DIR}
      rm -rf ${VCPKG_CACHE_DIR}/*
      ls -la ${VCPKG_CACHE_DIR}
      mv ${VCPKG_CACHE_DIR}/../vcpkg_cache.zip ${VCPKG_CACHE_DIR}/vcpkg_cache.zip
      ls -la ${VCPKG_CACHE_DIR}
      unzip ${VCPKG_CACHE_DIR}/vcpkg_cache.zip -d ${VCPKG_CACHE_DIR}
      ls -la ${VCPKG_CACHE_DIR}
      rm -f ${VCPKG_CACHE_DIR}/vcpkg_cache.zip
      ls -la ${VCPKG_CACHE_DIR}
    upload_caches: vcpkg

